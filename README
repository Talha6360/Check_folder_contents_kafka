# 🗂️ Check Folder Contents with Kafka (Deployment Monitor)

This project is a Kafka-based microservice system that helps validate files before deployment. It simulates a real-world scenario where files (e.g., videos, configs, datasets) must be verified before going live in production.

✅ **Automatically checks if all required files exist before deployment and returns a PASS/FAIL result via Kafka!**

---

## 📦 What This Project Does

- Accepts a JSON deployment payload describing files to be deployed.
- Checks if the specified files exist in the correct folder structure.
- Responds back with deployment status using Kafka:
  - ✅ **PASS** if all files are found.
  - ❌ **FAIL** if any files are missing (with the missing files listed).
- Uses Apache Kafka (via Docker) for communication between services.
- Divides functionality into 3 Python microservices:
  - **Producer**: Sends deployment request.
  - **Validator**: Validates files and sends result.
  - **Monitor**: Monitors validation responses.

---

## 🚀 How to Run This Project

### 1️⃣ Clone the Repository

```bash
git clone https://github.com/Talha6360/Check_folder_contents_kafka.git
cd Check_folder_contents_kafka
2️⃣ Start Kafka and Zookeeper via Docker
bash
Copy code
docker-compose up -d
This will start:

Kafka Broker → localhost:9092

Zookeeper → localhost:2181

3️⃣ Open 3 Terminals and Run Services
Make sure you run these commands from the project root directory (Check_folder_contents_kafka).

🟢 Terminal 1 – Producer

Sends a deployment request based on the JSON payload in data/payload.json.

bash
Copy code
python scripts/produce.py
🔵 Terminal 2 – Validator

Validates if the files listed in the deployment payload exist.

bash
Copy code
python scripts/validate_and_respond.py
🟡 Terminal 3 – Monitor

Listens for validation results and logs deployment status.

bash
Copy code
python scripts/monitor.py
📁 Project Structure
bash
Copy code
Check_folder_contents_kafka/
├── data/
│   ├── payload.json               # Deployment payload JSON
│   └── serve/org2/ws5/collB/     # Folder where files must be placed
│       ├── video1.mp4
│       └── video2.mp4
├── scripts/
│   ├── produce.py                # Kafka producer script
│   ├── validate_and_respond.py  # Validator consumer script
│   └── monitor.py                # Monitor consumer script
├── docker-compose.yml            # Docker Compose to start Kafka & Zookeeper
└── README.md                    # This project documentation
📄 Example Payload (data/payload.json)
json
Copy code
{
  "deployment_id": "deploy_42ef",
  "target": "serve",
  "org": "org2",
  "workspace": "ws5",
  "collection": "collB",
  "files": [
    "video1.mp4",
    "video2.mp4"
  ]
}
💡 Tips
Place the required files inside:

bash
Copy code
data/serve/org2/ws5/collB/
If any file from the payload JSON is missing, the validator will send a FAIL response listing the missing files.

🔧 Tech Stack
🐍 Python 3 (Producer, Validator, Monitor microservices)

🐘 Apache Kafka (running in Docker containers)

📝 JSON (file payload format)

⚙️ YAML (docker-compose.yml for service orchestration)

🔮 Future Improvements
Add notifications (Slack, Email) on validation results.

Persist validation logs to a database.

Build a web UI for uploading payloads and displaying results.

👨‍💻 Author
Mohammed Abdul Talha Shahri
GitHub Profile

🧠 For Beginners
This project helps you learn:

Kafka fundamentals (topics, producers, consumers)

Writing Python microservices for message processing

Using Docker Compose to orchestrate services
